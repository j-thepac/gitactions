# Set Up Env
# Checkout Code
# install Dependencies
# Check CodeFormatting
# Build Project if Necessary
# Run Automatd Tests
# Upload Code Coverage as Artifact
# Cache Dependencies
# On Failure , Send message , Mail

name: PythonCI
on: [workflow_dispatch]
permissions:
  contents: read

jobs:
  completeCIJob:
    runs-on: ubuntu-latest
    steps:
      
    - name: 1. Set up Env
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        
    - name: 2. Checkout Code
      uses: actions/checkout@v3     
      
    - name: 3. Install dependencies 
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
       
    - name: 4. Verify Formatting
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
        
    - name: 5. Run Automatd Tests
      run: |
        #pytest
        mkdir -p path/to/artifact
        echo hello > path/to/artifact/world.txt
    
    - name: 6. Upload Code Coverage as Artifact
    - uses: actions/upload-artifact@v3
      with:
        name: my-artifact
        path: path/to/artifact/world.txt

#https://github.com/actions/cache/blob/main/examples.md#python---pip
#Google search: actions/cache@v3
#key : stores hash of dependencies , OS etc., to track changes and retrived right dependecies

    - uses: 7. actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
